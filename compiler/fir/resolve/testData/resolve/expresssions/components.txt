FILE: components.kt
    public final data class D : R|kotlin/Any| {
        public constructor(x: R|kotlin/Int|, y: R|kotlin/String|): R|D| {
            super<R|kotlin/Any|>()
        }

        public final val x: R|kotlin/Int| = R|<local>/x|
            public get(): R|kotlin/Int|

        public final val y: R|kotlin/String| = R|<local>/y|
            public get(): R|kotlin/String|

        public final fun component1(): R|kotlin/Int| {
            ^component1 R|/D.x|
        }

        public final fun component2(): R|kotlin/String| {
            ^component2 R|/D.y|
        }

    }
    public final fun foo(list: R|kotlin/collections/List<D>|): R|kotlin/Unit| {
        lval <range>: R|kotlin/collections/List<D>| = R|<local>/list|
        lval <iterator>: R|kotlin/collections/Iterator<D>| = R|<local>/<range>|.R|FakeOverride<kotlin/collections/List.iterator: R|kotlin/collections/Iterator<D>|>|()
        while(R|<local>/<iterator>|.R|FakeOverride<kotlin/collections/Iterator.hasNext: R|kotlin/Boolean|>|()) {
            lval <destruct>: R|D| = R|<local>/<iterator>|.R|FakeOverride<kotlin/collections/Iterator.next: R|D|>|()
            lval x: R|kotlin/Int| = R|<local>/<destruct>|.R|/D.component1|()
            lval y: R|kotlin/String| = R|<local>/<destruct>|.R|/D.component2|()
        }

        lval <destruct>: <ERROR TYPE REF: Unresolved name: first> = R|<local>/list|.<Unresolved name: first>#()
        lval x: <ERROR TYPE REF: Unresolved name: component1> = R|<local>/<destruct>|.component1()
        lval y: <ERROR TYPE REF: Unresolved name: component2> = R|<local>/<destruct>|.component2()
        R|<local>/list|.<Unresolved name: forEach>#(<L> = forEach@fun <implicit>.<anonymous>(<destruct>: <implicit>): <implicit> {
            lval x: <implicit> = <destruct>#.component1()
            lval y: <implicit> = <destruct>#.component2()
            println#(x#)
            println#(y#)
        }
        )
    }
